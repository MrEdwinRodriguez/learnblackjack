[{"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/index.js":"1","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/App.js":"2","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Navbar.js":"3","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Landing.js":"4","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/auth/Register.js":"5","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/auth/Login.js":"6","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Footer.js":"7","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/store.js":"8","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/index.js":"9","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/alert.js":"10","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/types.js":"11","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/alert.js":"12","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Alert.js":"13","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/auth.js":"14","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/auth.js":"15","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/utils/setAuthToken.js":"16","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/dashboard/Dashboard.js":"17","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/routing/PrivateRoute.js":"18","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/profile.js":"19","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/profile.js":"20","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Play.js":"21","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Learn.js":"22","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/LearnCounting.js":"23","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/blackjack.js":"24","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/game.js":"25","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Outcome.js":"26","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/game.js":"27","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Rules.js":"28","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/rules.js":"29","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/PlayerCards.js":"30","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/DealerCards.js":"31","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/PlayerSplitCards.js":"32","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/basicStratagy.js":"33"},{"size":156,"mtime":1610483418741,"results":"34","hashOfConfig":"35"},{"size":2092,"mtime":1616097508315,"results":"36","hashOfConfig":"35"},{"size":1344,"mtime":1615769490248,"results":"37","hashOfConfig":"35"},{"size":722,"mtime":1610564044370,"results":"38","hashOfConfig":"35"},{"size":3473,"mtime":1611683511540,"results":"39","hashOfConfig":"35"},{"size":2283,"mtime":1615835248039,"results":"40","hashOfConfig":"35"},{"size":490,"mtime":1615769379201,"results":"41","hashOfConfig":"35"},{"size":394,"mtime":1610973986494,"results":"42","hashOfConfig":"35"},{"size":237,"mtime":1614108469415,"results":"43","hashOfConfig":"35"},{"size":405,"mtime":1611099838366,"results":"44","hashOfConfig":"35"},{"size":557,"mtime":1614970773149,"results":"45","hashOfConfig":"35"},{"size":388,"mtime":1611862483992,"results":"46","hashOfConfig":"35"},{"size":513,"mtime":1611170493328,"results":"47","hashOfConfig":"35"},{"size":2133,"mtime":1611692232220,"results":"48","hashOfConfig":"35"},{"size":1196,"mtime":1611690718666,"results":"49","hashOfConfig":"35"},{"size":252,"mtime":1611587772809,"results":"50","hashOfConfig":"35"},{"size":1688,"mtime":1615145567571,"results":"51","hashOfConfig":"35"},{"size":654,"mtime":1611768317978,"results":"52","hashOfConfig":"35"},{"size":631,"mtime":1612138879566,"results":"53","hashOfConfig":"35"},{"size":1196,"mtime":1615675483316,"results":"54","hashOfConfig":"35"},{"size":20131,"mtime":1616285511887,"results":"55","hashOfConfig":"35"},{"size":23691,"mtime":1616184380983,"results":"56","hashOfConfig":"35"},{"size":1192,"mtime":1612210531343,"results":"57","hashOfConfig":"35"},{"size":17020,"mtime":1615579473408,"results":"58","hashOfConfig":"35"},{"size":441,"mtime":1614108980315,"results":"59","hashOfConfig":"35"},{"size":561,"mtime":1614109616823,"results":"60","hashOfConfig":"35"},{"size":366,"mtime":1614108963850,"results":"61","hashOfConfig":"35"},{"size":1576,"mtime":1615145288186,"results":"62","hashOfConfig":"35"},{"size":1318,"mtime":1614804870628,"results":"63","hashOfConfig":"35"},{"size":745,"mtime":1616100138723,"results":"64","hashOfConfig":"35"},{"size":1801,"mtime":1616100267190,"results":"65","hashOfConfig":"35"},{"size":598,"mtime":1615163954340,"results":"66","hashOfConfig":"35"},{"size":3941,"mtime":1615407784184,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"6jrado",{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"70"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"70"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"70"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"70"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"70"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"70"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"70"},"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/index.js",[],["150","151"],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/App.js",["152"],"import React, { Fragment, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Footer from './components/layout/Footer';\nimport Landing from './components/layout/Landing';\nimport Alert from './components/layout/Alert';\nimport Outcome from './components/layout/Outcome';\nimport Login from './components/auth/Login';\nimport Register from './components/auth/Register';\nimport Dashboard from './components/dashboard/Dashboard';\nimport Play from './components/game/Play';\nimport Rules from './components/game/Rules';\nimport Learn from './components/game/Learn';\nimport LearnCounting from './components/game/LearnCounting';\nimport PrivateRoute from './components/routing/PrivateRoute';\nimport { loadUser } from './actions/auth';\nimport setAuthToken from './utils/setAuthToken';\n//redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './App.css';\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch(loadUser());\n  }, []);\n  \n  return (\n    <Provider store={store}>\n      <Router>\n        <Fragment>\n          <Navbar />\n          <Route exact path='/' component={Landing} />\n          <section className='container-fluid hold-alert'>\n          <Alert />\n          {/* <Outcome /> */}\n            <Switch>\n              <Route exact path='/register' component={Register} /> */}\n              <Route exact path='/login' component={Login} />\n              <PrivateRoute exact path='/dashboard' component={Dashboard} />\n              <PrivateRoute exact path='/play-black-jack' component={Play} />\n              <PrivateRoute exact path='/learn-black-jack' component={Learn} />\n              <PrivateRoute exact path='/rules' component={Rules} />\n              <PrivateRoute exact path='/learn-to-play-black-jack-counting' component={LearnCounting} />\n            </Switch>\n          </section>\n          <Footer />\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Navbar.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Landing.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/auth/Register.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/auth/Login.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Footer.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/store.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/index.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/alert.js",["153"],"import {SET_ALERT, REMOVE_ALERT } from \"../actions/types\";\nconst initialState = [];\n\nexport default function (state=initialState, action) {\n    const { type, payload } = action;\n    switch(type) {\n        case SET_ALERT:\n            return [...state, payload];\n        case REMOVE_ALERT:\n            return state.filter(alert => alert.id !== payload);\n        default: \n            return state;\n\n    }\n\n}","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/types.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/alert.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Alert.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/auth.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/auth.js",["154"],"import { REGISTER_SUCCESS, REGISTER_FAIL, AUTH_ERROR, USER_LOADED, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from '../actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    loading: true,\n    user: null\n};\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n    switch(type) {\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                loading: false,\n                user: payload\n            }\n        case REGISTER_SUCCESS: \n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', payload.token);\n            return {\n                ...state,\n                ...payload,\n                isAuthenticated: true,\n                loading: false\n            }\n        case REGISTER_FAIL:\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT:\n            localStorage.removeItem(\"token\");\n            return {\n                ...state,\n                token: null,\n                isAuthenticated: false,\n                loading: false\n            }\n        default:\n            return state;\n\n    }\n\n}","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/utils/setAuthToken.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/dashboard/Dashboard.js",["155","156"],"import React, {Fragment ,useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport {Link, Redirect} from 'react-router-dom';\nimport  { connect } from 'react-redux';\nimport { getCurrentProfile } from '../../actions/profile';\n\nconst Dashboard = ({getCurrentProfile, auth, profile}) => {\n    useEffect(() => {\n        getCurrentProfile();\n    }, []);\n\n    return (\n        <Fragment>\n            <section className=\"landing\">\n                <div className=\"dark-overlay\">\n                    <div className='container'>\n                    <div className=\"signup-form\">\n                        <div>\n                        <h2 className='text-primary-dashboard'>PLAY & LEARN</h2>\n                            <div class=\"btn-group-vertical\">\n                                <Link to='play-black-jack' class=\"btn btn-primary\">Play Black Jack</Link>\n                                <Link to='learn-black-jack' class=\"btn btn-primary\">Learn Black Jack</Link>\n                                <Link to='rules' class=\"btn btn-primary\">Rules</Link>\n                                {/* <Link to='learn-to-play-black-jack-counting' class=\"btn btn-primary\">Learn to</Link> */}\n                            </div>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </section>\n        </Fragment>\n    )\n}\n\nDashboard.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired,\n    profile: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    profile: state.profile\n})\n\nexport default connect(mapStateToProps, {getCurrentProfile})(Dashboard)\n","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/routing/PrivateRoute.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/profile.js",["157"],"import {GET_PROFILE, PROFILE_ERROR } from \"../actions/types\";\nconst initialState = {\n    profile: null,\n    profiles: [],\n    loading: true,\n    error: {}\n}\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case GET_PROFILE:\n            return {\n                ...state,\n                profile: payload,\n                loading: false,\n            }\n        case PROFILE_ERROR: \n            return {\n                ...state,\n                error: payload,\n                loading: false\n            }\n        default:\n            return state;\n\n    }\n}",["158","159"],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/profile.js",["160","161"],"import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport { GET_PROFILE, PROFILE_ERROR} from './types';\n\n//get current user's profiles\nexport const getCurrentProfile = () => async dispatch => {\n\n    try {\n        const res = await axios.get('/api/profile/me');\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        })\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText, \n                status: error.response.status\n            }\n        })\n    }\n}\n\nexport const updateMoney = (newTotal) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    try {\n        const body = JSON.stringify({money: newTotal.money})\n        const res = await axios.post('/api/profile/money', body, config);\n        return res.data.money\n        dispatch({\n            type: GET_PROFILE,\n            payload: res.data\n        })\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.message, \n                status: error.status\n            }\n        }) \n    }\n\n};\n","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Play.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import React, {Fragment ,useEffect, useState, useRef} from 'react'\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport  { connect } from 'react-redux';\nimport { setAlert } from \"../../actions/alert\";\nimport { getCurrentProfile, updateMoney } from '../../actions/profile';\nimport blackjack  from '../../game/blackjack';\nimport { Double } from 'bson';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Overlay from 'react-bootstrap/Overlay';\nimport PlayerCards from './display/PlayerCards';\nimport DealerCards from './display/DealerCards';\nimport PlayerSplitCards from './display/PlayerSplitCards';\n\nconst Play = ({getCurrentProfile, updateMoney, setOutcome, setAlert, auth, profile}) => {\n    useEffect(() => {\n        getCurrentProfile();\n    }, []);\n\n    const [formData, setFormData] = useState({\n        money: profile ? profile.money : 0,\n        betAmount: 0,\n        hand: [],\n        hands: [],\n        dealer: [],\n        gamePlayers: [],\n        outcomes: [],\n        disableDeal: false,\n        disableHit: true,\n        disableDouble: true,\n        disableSplit: true,\n        disableStay: true,\n        showHitSplit: false,\n        splitHandNumber: null,\n        showDealerCards: false,\n        shuffleDeck: false,\n        bidWarning: null,\n        profileLoaded: false,\n    })\n    let {money, hand, hands, dealer, gamePlayers, outcomes, disableDeal, disableHit, disableDouble, disableSplit, disableStay, showHitSplit, splitHandNumber, showDealerCards, betAmount, bidWarning, shuffleDeck, profileLoaded } = formData;\n\n\n    if (profile && !profileLoaded) {\n        setFormData({...formData, money: profile.money, profileLoaded: true});\n    }\n    let dealerHandObj = null;\n    let dealerHand = null;\n    let playerHand = null;\n    let playerHands = [];\n    let displayOutcome = null;\n    const gameObj = blackjack();\n    gameObj.createDeck();\n    gameObj.shuffle();\n    if (dealer && dealer.length > 0) {\n        dealerHand = <DealerCards dealer={dealer} showDealerCards={showDealerCards}/>\n    }\n    if (hand && hand.length > 0) {\n        playerHand = <PlayerCards hand={hand}/>\n    }\n    if (hands && hands.length > 0) {\n        const reversedHands = hands.reverse();\n        reversedHands.forEach(singleHand => {\n            const individualHand = singleHand.hand.map(card => {\n                return <PlayerSplitCards card={card} />\n            })\n            let unorderedList = <ul className='card_list_split'>{individualHand}</ul>\n            playerHands.push(unorderedList);\n        })\n        hands = reversedHands.reverse();\n    }\n    if (outcomes && outcomes.length > 0 && Array.isArray(outcomes)) {\n            outcomes.forEach(outcome => {\n                if (outcome == 'Loss') {\n                    setAlert(outcome, 'danger', 1000);\n                } else if (outcome == 'Win') {\n                    setAlert(outcome, 'success', 1000);\n                } else {\n                    setAlert(outcome, 'white', 1000);\n                }\n                    \n            })\n    }\n\n    const setBet = e => setFormData({ ...formData, betAmount: e.target.value}); \n    const target = useRef(null);\n\n    const deal = (players = 2) => {\n        if (betAmount < 10) {\n            setFormData({ ...formData, bidWarning: \"Minimum Bet is $10\"})\n            return false;\n        } else if (betAmount > 100) {\n            setFormData({ ...formData, bidWarning: \"Maximum Bet is $100\"})\n            return false;\n        } else if (betAmount > money) {\n            setFormData({ ...formData, bidWarning: 'You Do Not Enough Money for this bet'})\n            return false;\n        } else if (money < 10 ) {\n            setFormData({ ...formData, bidWarning: 'You Do Not Enough Money to play at this table, go to \"Learn Blackjack\" to earn credits'})\n            return false\n        }\n        const evaluateInitialHand = gameObj.startblackjack(players);\n        dealerHandObj = gameObj.players.slice(-1)[0];\n        if (!evaluateInitialHand.hasBlackJack) {\n            if (evaluateInitialHand.playerHasDoubles) {\n                setFormData({ ...formData, hand: gameObj.players[0].hand, hands: [], dealer: dealerHandObj.hand, gamePlayers: gameObj.players, disableDeal: true, disableHit: false, disableDouble: false, disableStay: false, disableSplit: false, outcomes: [], showDealerCards: false, showHitSplit: false, money: money - betAmount, bidWarning: null});\n            } else {\n                setFormData({ ...formData, hand: gameObj.players[0].hand, hands: [], dealer: dealerHandObj.hand, gamePlayers: gameObj.players, disableDeal: true, disableHit: false, disableDouble: false, disableStay: false, outcomes: [], showDealerCards: false, showHitSplit: false, showDealerCards: false, money: money - betAmount, bidWarning: null});\n            }\n        } else {\n            let newTotal = money;\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(betAmount) + (parseInt(betAmount)*1.5);\n            else newTotal = parseInt(newTotal) - parseInt(betAmount);\n            setFormData({ ...formData, hands: [], dealer: dealerHandObj.hand, hand: gameObj.players[0].hand,  outcomes: gameObj.currentGameOutcome, showHitSplit: false, money: newTotal, bidWarning: null, showDealerCards: true })\n        } \n    };\n\n    const hitMe = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const currentOutcome = gameObj.hit(player);\n        const currentScore = gameObj.getScore(player);\n        if (currentScore > 21 ) {\n            updateMoney({money: money});\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true});\n        }\n        else if (currentScore == 21) {\n            gameObj.dealerPlay();\n            let newTotal = money;\n            if(gameObj.currentGameOutcome.length > 0) {\n                if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(money) + parseInt(betAmount);\n                else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(money) + parseInt(parseInt(betAmount)*2);\n            }\n            updateMoney({money: newTotal});\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDeal: false, disableHit: false,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal});\n        } else {\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDouble: true, disableSplit: true});\n        }\n    };\n\n    const hitSplit = (player=0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        let handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        const currentHandOutcome = gameObj.hitSplitHand(player, handIndex);\n        if (currentHandOutcome  > 21 ) {\n            gameObj.currentGameOutcome.push(gameObj.loss);\n            gameObj.players[player].hands[handIndex].isDone = true;\n            if (totalHands-1 == handIndex ) {\n                gameObj.dealerPlaySplit();\n                setFormData({...formData, dealer: dealerHandObj.hand, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true}); \n                updateMoney({money: money});\n            } else {\n                setFormData({...formData, outcomes: currentHandOutcome});\n            }\n        } else if (currentHandOutcome  == 21) {\n            gameObj.currentGameOutcome.push(gameObj.loss);\n            gameObj.players[player].hands[handIndex].isDone = true;\n            if (totalHands-1 == handIndex ) {\n                gameObj.dealerPlaySplit();\n                setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true}); \n                updateMoney({money: money});\n            } else {\n                setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome});\n            }\n        } else {\n            setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome, disableDouble: true, disableSplit: true});\n        }\n    }\n\n    const stay = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        gameObj.dealerPlay();\n        dealerHandObj = gameObj.players.slice(-1)[0];\n        let newTotal = money;\n        if(gameObj.currentGameOutcome.length > 0) {\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(parseInt(betAmount)*2);\n        }\n        updateMoney({money: newTotal});\n        setFormData({...formData, dealer: dealerHandObj.hand, outcomes: gameObj.currentGameOutcome,  disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal});\n    };\n\n    const staySplit = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        let handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        gameObj.players[player].hands[handIndex].isDone = true;\n        if (totalHands-1 == handIndex ) {\n            gameObj.dealerPlaySplit();\n            const dealerHandObj = gameObj.players.slice(-1)[0];\n            updateMoney({money: money});\n            setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: gameObj.currentGameOutcome, disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true}); \n        } else {\n            gameObj.hitSplitHand(player, handIndex+1);\n            const handHasDouble = gameObj.playerHasDoubles(player, handIndex >= 0 ? handIndex : null)\n            setFormData({...formData, hands: gameObj.players[player].hands, showHitSplit: handHasDouble});\n        }\n    }\n\n    const double = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        gameObj.hit(player);\n        gameObj.dealerPlay();\n        let newTotal = money;\n        if(gameObj.currentGameOutcome.length > 0) {\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(parseInt(betAmount)*3);\n            else newTotal = parseInt(newTotal) - parseInt(betAmount);\n        }\n        updateMoney({money: newTotal});\n        setFormData({...formData,  outcomes: gameObj.currentGameOutcome, hand: gameObj.players[0].hand, dealer: gameObj.players[gameObj.players.length -1].hand, disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal });\n    }\n\n    const doubleSplit = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        const handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        const currentHandOutcome = gameObj.hitSplitHand(player, handIndex);\n        gameObj.players[player].hands[handIndex].isDone = true;\n        if (totalHands-1 == handIndex ) {\n            gameObj.dealerPlaySplit();\n            dealerHandObj = gameObj.players.slice(-1)[0];\n            updateMoney({money: money});\n            setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true}); \n        } else {\n            gameObj.hitSplitHand(player, handIndex+1);\n            setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome});\n        }\n    }\n\n    const split = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        var cardValue;\n        const blackjackPlayer = gameObj.players[player];\n        if (gameObj.players[player].hand.length > 0) {\n            cardValue = gameObj.players[player].hand[0].value;\n        } else {\n            const handIndexCheck = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n            cardValue = gameObj.players[player].hands[handIndexCheck].hand.value;\n        }\n        if (cardValue == 'A') {\n            gameObj.splitAce(player);\n            updateMoney({money: money});\n            setFormData({...formData,  outcomes: gameObj.currentGameOutcome, hand: [],  hands: gameObj.players[player].hands, dealer: gameObj.players[gameObj.players.length -1].hand, disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true });\n        } else {\n            dealerHandObj = gameObj.players.slice(-1)[0];\n            const handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n            const handHasDouble = gameObj.playerHasDoubles(player, handIndex >= 0 ? handIndex : null)\n            if (blackjackPlayer.hands && blackjackPlayer.hands.length > 0) {\n                gameObj.splitSplit(player, handIndex)  \n            } else {\n                gameObj.split(player)\n            }\n           ;\n            setFormData({...formData, hand: [], hands: gameObj.players[player].hands, disableDeal: true, disableSplit: handHasDouble ? false : true,  showHitSplit: true, splitHandNumber: isNaN(splitHandNumber) ? 0 : splitHandNumber++})\n        }\n    }\n\n    // ));\n    return (\n        <Fragment>\n            <section className=\"landing\">\n                <div className=\"dark-overlay\">\n                    <div className='container'>\n                        <div className='table'>\n                        <div className='hold-dealer'>\n                            <div class='dealer'>\n                                <ul className='cardList'>\n                                    {dealerHand ? dealerHand : <li></li>}\n                                </ul>\n                            </div>\n                        </div>\n                        <div className='game_outcome'> {displayOutcome ? displayOutcome : \"\"}</div>\n                            <h2 className='table-title'>BlackJack</h2>\n                            <h5 className='table-pays'>Pays 2 to 3</h5>\n                            <h5 className='table-dealer-stands'>Dealer Stand on 17</h5>\n                             <div className='hold-player-one play-only'>\n                                <div class='player-position-one'>\n                                    <ul className='cardList'>\n                                        {playerHand ? playerHand : <li></li>}\n                                    </ul>\n                                    <div className='hold_split'>\n                                        {playerHands ? playerHands : <li></li>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='bet'>\n                            <div className=\"btn btn-light\" disabled>Available: {money}</div>setBet\n                            <input className=\"form-control bet-input\" type=\"number\" id=\"betAmount\" min=\"10\" max='100' step=\"1\" placeholder=\" Min $10\" value={betAmount} onChange={e => setBet(e)} />\n                        </div>\n                        <div class=\"row justify-content-md-center blackjack-buttons\">\n                            <div class=\"col col-lg-2\">\n                                <button type=\"button\" ref={target} className=\"btn btn-success\" onClick={() => deal()} disabled={disableDeal} >Deal</button>\n                                <Overlay target={target.current} show={bidWarning ? true : false} placement=\"top\">\n                                    {(props) => (\n                                    <Tooltip className=\"overlay-bid\" {...props}>\n                                        {bidWarning}\n                                    </Tooltip>\n                                    )}\n                                </Overlay>\n                            </div>\n                            <div class=\"col-md-auto\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? hitMe() : hitSplit()}} disabled={disableHit} >Hit</button>\n                            </div>\n                            <div class=\"col-md-auto\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? double() : doubleSplit()}} disabled={disableDouble}>Double</button>\n                            </div>\n                            <div class=\"col-md-auto\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => split()} disabled={disableSplit}>Split</button>\n                            </div>\n                            <div class=\"col col-lg-\">\n                                <button type=\"button\" className=\"btn btn-danger\" onClick={() => {!showHitSplit ? stay() : staySplit()}} disabled={disableStay}>Stay</button>\n                            </div>\n                        </div>\n                        <div className = \"btn-group-vertical\">\n                            <button type=\"button\" ref={target} className=\"btn btn-success\" onClick={() => deal()} disabled={disableDeal} >Deal</button>\n                                <Overlay target={target.current} show={bidWarning ? true : false} placement=\"right\">\n                                    {(props) => (\n                                    <Tooltip className=\"overlay-bid\" {...props}>\n                                        {bidWarning}\n                                    </Tooltip>\n                                    )}\n                                </Overlay>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? hitMe() : hitSplit()}} disabled={disableHit} >Hit</button>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? double() : doubleSplit()}} disabled={disableDouble}>Double</button>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => split()} disabled={disableSplit}>Split</button>\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => {!showHitSplit ? stay() : staySplit()}} disabled={disableStay}>Stay</button>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </Fragment>\n    )\n}\n\nPlay.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    updateMoney: PropTypes.func.isRequired,\n    setAlert: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired,\n    // blackjack: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    profile: state.profile.profile\n})\n\nexport default connect(mapStateToProps, {setAlert, getCurrentProfile, updateMoney})(Play)","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Learn.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221"],"import React, {Fragment ,useEffect, useState, useRef} from 'react'\nimport PropTypes from 'prop-types';\nimport {Link, Redirect} from 'react-router-dom';\nimport  { connect } from 'react-redux';\nimport { setAlert } from \"../../actions/alert\";\nimport { getCurrentProfile, updateMoney } from '../../actions/profile';\nimport blackjack  from '../../game/blackjack';\nimport basicStrategy  from '../../game/basicStratagy';\nimport { Double } from 'bson';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Overlay from 'react-bootstrap/Overlay';\nimport PlayerCards from './display/PlayerCards';\nimport DealerCards from './display/DealerCards';\nimport PlayerSplitCards from './display/PlayerSplitCards';\n\nconst Learn = ({getCurrentProfile, updateMoney, setOutcome, setAlert, auth, profile}) => {\n    useEffect(() => {\n        getCurrentProfile();\n    }, []);\n\n    const [formData, setFormData] = useState({\n        money: 1000,\n        profileMoney: 0,\n        betAmount: 0,\n        hand: [],\n        hands: [],\n        dealer: [],\n        gamePlayers: [],\n        outcomes: [],\n        disableDeal: false,\n        disableHit: true,\n        disableDouble: true,\n        disableSplit: true,\n        disableStay: true,\n        showHitSplit: false,\n        splitHandNumber: null,\n        showDealerCards: false,\n        showRecommendation: false,\n        recommendationState: null,\n        shuffleDeck: false,\n        bidWarning: null,\n        profileLoaded: false,\n        strategy: null,\n        showRestart: false\n    })\n    let {money, hand, hands, dealer, gamePlayers, outcomes, disableDeal, disableHit, disableDouble, disableSplit, disableStay, showHitSplit, splitHandNumber, showDealerCards, showRecommendation, recommendationState, betAmount, bidWarning, shuffleDeck, profileLoaded, strategy, profileMoney, showRestart } = formData;\n\n\n    if (profile && !profileLoaded) {\n        setFormData({...formData, profileMoney: profile.money, profileLoaded: true});\n    }\n    let dealerHandObj = null;\n    let dealerHand = null;\n    let playerHand = null;\n    let playerHands = [];\n    let displayOutcome = null;\n    const gameObj = blackjack();\n    // const stratagy = basicStratagy();\n    gameObj.createDeck();\n    gameObj.shuffle();\n    if (dealer && dealer.length > 0) {\n        dealerHand = <DealerCards dealer={dealer} showDealerCards={showDealerCards}/>\n    }\n    if (hand && hand.length > 0) {\n        playerHand = <PlayerCards hand={hand}/>\n    }\n    if (hands && hands.length > 0) {\n        const reversedHands = hands.reverse();\n        reversedHands.forEach(singleHand => {\n            const individualHand = singleHand.hand.map(card => {\n                return <PlayerSplitCards card={card} />\n            })\n            let unorderedList = <ul className='card_list_split'>{individualHand}</ul>\n            playerHands.push(unorderedList);\n        })\n        hands = reversedHands.reverse();\n    }\n    if (outcomes && outcomes.length > 0 && Array.isArray(outcomes)) {\n            outcomes.forEach(outcome => {\n                if (outcome == 'Loss') {\n                    setAlert(outcome, 'danger', 1000);\n                } else if (outcome == 'Win') {\n                    setAlert(outcome, 'success', 1000);\n                } else {\n                    setAlert(outcome, 'white', 1000);\n                }\n                    \n            })\n    }\n\n    const setBet = e => setFormData({ ...formData, betAmount: e.target.value}); \n    const target = useRef(null);\n\n    const bookSays = (isOriginalHand = false, isPair = false, handIndex = null) => {\n        const recommendation = basicStrategy(gameObj.getDealerFirstCard(),gameObj.getScore(0, handIndex != null && handIndex >= 0 ? handIndex : null), isOriginalHand, gameObj.playerHasAce(hands.length > 0 ? true :false), isPair );\n        console.log(recommendation)\n        return recommendation;\n    }\n\n    const deal = (players = 2) => {\n        if (betAmount < 10) {\n            setFormData({ ...formData, bidWarning: \"Minimum Bet is $10\"})\n            return false;\n        } else if (betAmount > 100) {\n            setFormData({ ...formData, bidWarning: \"Maximum Bet is $100\"})\n            return false;\n        } else if (betAmount > money) {\n            setFormData({ ...formData, bidWarning: 'You Do Not Enough Money for this bet'})\n            return false;\n        } else if (money < 10 ) {\n            setFormData({ ...formData, showRestart: true, bidWarning: 'You ran out of Learn credits. Hit Restart to begin new learning session '})\n            return false\n        }\n        const evaluateInitialHand = gameObj.startblackjack(players);\n        dealerHandObj = gameObj.players.slice(-1)[0];\n        if (!evaluateInitialHand.hasBlackJack) {\n            if (evaluateInitialHand.playerHasDoubles) {\n                const recommend = bookSays(true, true);\n                setFormData({ ...formData, hand: gameObj.players[0].hand, hands: [], dealer: dealerHandObj.hand, gamePlayers: gameObj.players, disableDeal: true, disableHit: false, disableDouble: false, disableStay: false, disableSplit: false, outcomes: [], showDealerCards: false, showHitSplit: false, showRecommendation: true, recommendationState: recommend, money: money - betAmount, bidWarning: null});\n            } else {\n                const recommend = bookSays(true, false);\n                setFormData({ ...formData, hand: gameObj.players[0].hand, hands: [], dealer: dealerHandObj.hand, gamePlayers: gameObj.players, disableDeal: true, disableHit: false, disableDouble: false, disableStay: false, outcomes: [], showDealerCards: false, showHitSplit: false, showDealerCards: false, showRecommendation: true, recommendationState: recommend, money: money - betAmount, bidWarning: null});\n            }\n        } else {\n            let newTotal = money;\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(betAmount) + (parseInt(betAmount)*1.5);\n            else newTotal = parseInt(newTotal) - parseInt(betAmount);\n            setFormData({ ...formData, hands: [], dealer: dealerHandObj.hand, hand: gameObj.players[0].hand,  outcomes: gameObj.currentGameOutcome, showHitSplit: false, money: newTotal, bidWarning: null, showDealerCards: true })\n        } \n    };\n\n    const hitMe = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const currentOutcome = gameObj.hit(player);\n        const currentScore = gameObj.getScore(player);\n        if (currentScore > 21 ) { \n            updateMoney({money: parseInt(profileMoney) + 10});\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10)});\n        }\n        else if (currentScore == 21) {\n            gameObj.dealerPlay();\n            let newTotal = money;\n            if(gameObj.currentGameOutcome.length > 0) {\n                if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(money) + parseInt(betAmount);\n                else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(money) + parseInt(parseInt(betAmount)*2);\n            }\n            updateMoney({money: parseInt(profileMoney) + 10});\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDeal: false, disableHit: false,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal, profileMoney: (parseInt(profileMoney) + 10)});\n        } else {\n            const recommend = bookSays();\n            setFormData({...formData, hand: gameObj.players[0].hand, outcomes: currentOutcome.length > 0 ? currentOutcome : [], disableDouble: true, disableSplit: true, recommendationState: recommend});\n        }\n    };\n\n    const hitSplit = (player=0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        let handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        const currentHandOutcome = gameObj.hitSplitHand(player, handIndex);\n        if (currentHandOutcome  > 21 ) {\n            gameObj.currentGameOutcome.push(gameObj.loss);\n            gameObj.players[player].hands[handIndex].isDone = true;\n            if (totalHands-1 == handIndex ) {\n                gameObj.dealerPlaySplit();\n                setFormData({...formData, dealer: dealerHandObj.hand, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10)}); \n                updateMoney({money: parseInt(profileMoney) + 10});\n            } else {\n                const recommend = bookSays(true, gameObj.playerHasDoubles(player, handIndex), handIndex);\n                setFormData({...formData, outcomes: currentHandOutcome, recommendationState: recommend});\n            }\n        } else if (currentHandOutcome  == 21) {\n            gameObj.currentGameOutcome.push(gameObj.loss);\n            gameObj.players[player].hands[handIndex].isDone = true;\n            if (totalHands-1 == handIndex ) {\n                gameObj.dealerPlaySplit();\n                setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10)}); \n                updateMoney({money: parseInt(profileMoney) + 10});\n            } else {\n                const recommend = bookSays(true, gameObj.playerHasDoubles(player, handIndex), handIndex);\n                setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome, recommendationState: recommend});\n            }\n        } else {\n            const recommend = bookSays(true, gameObj.playerHasDoubles(player, handIndex), handIndex);\n            setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome, disableDouble: true, disableSplit: true, recommendationState: recommend});\n        }\n    }\n\n    const stay = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        gameObj.dealerPlay();\n        dealerHandObj = gameObj.players.slice(-1)[0];\n        let newTotal = money;\n        if(gameObj.currentGameOutcome.length > 0) {\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(parseInt(betAmount)*2);\n        }\n        updateMoney({money: parseInt(profileMoney) + 10});\n        setFormData({...formData, dealer: dealerHandObj.hand, outcomes: gameObj.currentGameOutcome,  disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal, profileMoney: (parseInt(profileMoney) + 10)});\n    };\n\n    const staySplit = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        let handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        gameObj.players[player].hands[handIndex].isDone = true;\n        if (totalHands-1 == handIndex ) {\n            gameObj.dealerPlaySplit();\n            const dealerHandObj = gameObj.players.slice(-1)[0];\n            updateMoney({money: parseInt(profileMoney) + 10});\n            setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: gameObj.currentGameOutcome, disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10)}); \n        } else {\n            gameObj.hitSplitHand(player, handIndex+1);\n            const handHasDouble = gameObj.playerHasDoubles(player, handIndex >= 0 ? handIndex : null)\n            const recommend = bookSays(true, handHasDouble, handIndex);\n            setFormData({...formData, hands: gameObj.players[player].hands, showHitSplit: handHasDouble, recommendationState: recommend});\n        }\n    }\n\n    const double = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        gameObj.hit(player);\n        gameObj.dealerPlay();\n        let newTotal = money;\n        if(gameObj.currentGameOutcome.length > 0) {\n            if (gameObj.currentGameOutcome[0] == 'Push') newTotal = parseInt(newTotal) + parseInt(betAmount);\n            else if (gameObj.currentGameOutcome[0] == 'Win') newTotal = parseInt(newTotal) + parseInt(parseInt(betAmount)*3);\n            else newTotal = parseInt(newTotal) - parseInt(betAmount);\n        }\n        updateMoney({money: parseInt(profileMoney) + 10});\n        const recommend = bookSays();\n        setFormData({...formData,  outcomes: gameObj.currentGameOutcome, hand: gameObj.players[0].hand, dealer: gameObj.players[gameObj.players.length -1].hand, disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, money: newTotal, recommendationState: recommend, profileMoney: (parseInt(profileMoney) + 10) });\n    }\n\n    const doubleSplit = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        const blackjackPlayer = gameObj.players[player];\n        const totalHands = blackjackPlayer.hands.length;\n        const handIndex = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n        const currentHandOutcome = gameObj.hitSplitHand(player, handIndex);\n        gameObj.players[player].hands[handIndex].isDone = true;\n        if (totalHands-1 == handIndex ) {\n            gameObj.dealerPlaySplit();\n            dealerHandObj = gameObj.players.slice(-1)[0];\n            updateMoney({money: parseInt(profileMoney) + 10});\n            setFormData({...formData, dealer: dealerHandObj.hand, hands: gameObj.players[player].hands, outcomes: currentHandOutcome.length > 0 ?  currentHandOutcome : [], disableDeal: false, disableHit: true,  disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10)}); \n        } else {\n            gameObj.hitSplitHand(player, handIndex+1);\n            const recommend = bookSays(true, gameObj.playerHasDoubles(player, handIndex));\n            setFormData({...formData, hands: gameObj.players[0].hands, outcomes: currentHandOutcome, recommendationState: recommend});\n        }\n    }\n\n    const split = (player = 0) => {\n        if (gameObj.players.length == 0) gameObj.players = gamePlayers;\n        var cardValue;\n        const blackjackPlayer = gameObj.players[player];\n        if (gameObj.players[player].hand.length > 0) {\n            cardValue = gameObj.players[player].hand[0].value;\n        } else {\n            const handIndexCheck = blackjackPlayer.hands.findIndex(singleHand => !singleHand.isDone);\n            cardValue = gameObj.players[player].hands[handIndexCheck].hand.value;\n        }\n        if (cardValue == 'A') {\n            gameObj.splitAce(player);\n            updateMoney({money: parseInt(profileMoney) + 10});\n            setFormData({...formData,  outcomes: gameObj.currentGameOutcome, hand: [],  hands: gameObj.players[player].hands, dealer: gameObj.players[gameObj.players.length -1].hand, disableDeal: false, disableHit: true, disableDouble: true, disableSplit: true, disableStay: true, showDealerCards: true, profileMoney: (parseInt(profileMoney) + 10) });\n        } else {\n            dealerHandObj = gameObj.players.slice(-1)[0];\n            let handIndex = gameObj.players[player].hands.findIndex(singleHand => !singleHand.isDone);\n            let handHasDouble = false;\n            if (gameObj.players[player].hands.length > 0) {\n                handHasDouble = gameObj.playerHasDoubles(player, handIndex >= 0 ? handIndex : 0)\n            }\n            if (blackjackPlayer.hands && blackjackPlayer.hands.length > 0) {\n                gameObj.splitSplit(player, handIndex)  \n            } else {\n                gameObj.split(player)\n            };\n            let recommend = null;\n            if (gameObj.players[player].hands.length > 0) {\n                if (handIndex < 0) {\n                    handIndex = gameObj.players[player].hands.findIndex(singleHand => !singleHand.isDone);\n                }\n                console.log('line 275', handIndex)\n                recommend = bookSays(true, gameObj.playerHasDoubles(player, handIndex >= 0 ? handIndex : 0), handIndex);\n            }\n            setFormData({...formData, hand: [], hands: gameObj.players[player].hands, disableDeal: true, disableSplit: handHasDouble ? false : true,  showHitSplit: true, recommendationState: recommend, splitHandNumber: isNaN(splitHandNumber) ? 0 : splitHandNumber++})\n        }\n    }\n\n    const restartLearn = () =>{\n        window.location.reload();\n    }\n\n    // ));\n    return (\n        <Fragment>\n            <section className=\"landing\">\n                <div className=\"dark-overlay\">\n                    <div className='container'>\n                        <div className='table'>\n                        <div className='hold-dealer'>\n                            <div class='dealer'>\n                                <ul className='cardList'>\n                                    {dealerHand ? dealerHand : <li></li>}\n                                </ul>\n                            </div>\n                        </div>\n                        <div className='game_outcome'> {displayOutcome ? displayOutcome : \"\"}</div>\n                            <h2 className='table-title'>BlackJack</h2>\n                            {showRecommendation ? <div class='recommendation'>The book says you should: <span className='recommend-text'><strong>{recommendationState}</strong></span></div> : <div></div>}\n                            <h5 className='table-pays'>Pays 2 to 3</h5>\n                            <h5 className='table-dealer-stands'>Dealer Stand on 17</h5>\n                             <div className='hold-player-one'>\n                                <div class='player-position-one'>\n                                    <ul className='cardList'>\n                                        {playerHand ? playerHand : <li></li>}\n                                    </ul>\n                                    <div className='hold_split'>\n                                        {playerHands ? playerHands : <li></li>}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                        <div className='bet'>\n                            <div className=\"btn btn-light\" disabled>Available: {money}</div>setBet\n                            <input className=\"form-control bet-input\" type=\"number\" id=\"betAmount\" min=\"10\" max=\"100\" step=\"1\" placeholder=\" Min $10\" value={betAmount} onChange={e => setBet(e)} />\n                        </div>\n                        <div class=\"row justify-content-md-center blackjack-buttons\">\n                            <div class=\"col col-xs-12\">\n                                <button type=\"button\" ref={target} className=\"btn btn-success\" onClick={() => deal()} disabled={disableDeal} >Deal</button>\n                                <Overlay target={target.current} show={bidWarning ? true : false} placement=\"right\">\n                                    {(props) => (\n                                    <Tooltip className=\"overlay-bid\" {...props}>\n                                        {bidWarning}\n                                    </Tooltip>\n                                    )}\n                                </Overlay>\n                            </div>\n                            <div class=\"col-xs-12\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? hitMe() : hitSplit()}} disabled={disableHit} >Hit</button>\n                            </div>\n                            <div class=\"col-xs-12\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? double() : doubleSplit()}} disabled={disableDouble}>Double</button>\n                            </div>\n                            <div class=\"col-xs-12\">\n                                <button type=\"button\" className=\"btn btn-success\" onClick={() => split()} disabled={disableSplit}>Split</button>\n                            </div>\n                            <div class=\"col-xs-12\">\n                                <button type=\"button\" className=\"btn btn-danger\" onClick={() => {!showHitSplit ? stay() : staySplit()}} disabled={disableStay}>Stay</button>\n                            </div>\n                            <div class=\"col col-xs-12\">\n                                {showRestart ? <button type=\"button\" className=\"btn btn-danger\" onClick={() => restartLearn()} >Restart</button>: <div></div> }\n                            </div>\n                        </div>\n                        <div className = \"btn-group-vertical\">\n                            <button type=\"button\" ref={target} className=\"btn btn-success\" onClick={() => deal()} disabled={disableDeal} >Deal</button>\n                                <Overlay target={target.current} show={bidWarning ? true : false} placement=\"right\">\n                                    {(props) => (\n                                    <Tooltip className=\"overlay-bid\" {...props}>\n                                        {bidWarning}\n                                    </Tooltip>\n                                    )}\n                                </Overlay>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? hitMe() : hitSplit()}} disabled={disableHit} >Hit</button>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => {!showHitSplit ? double() : doubleSplit()}} disabled={disableDouble}>Double</button>\n                            <button type=\"button\" className=\"btn btn-success\" onClick={() => split()} disabled={disableSplit}>Split</button>\n                            <button type=\"button\" className=\"btn btn-danger\" onClick={() => {!showHitSplit ? stay() : staySplit()}} disabled={disableStay}>Stay</button>\n                            {showRestart ? <button type=\"button\" className=\"btn btn-danger\" onClick={() => restartLearn()} >Restart</button>: <div></div> }\n                        </div>\n                    </div>\n                </div>\n            </section>\n        </Fragment>\n    )\n}\n\nLearn.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    updateMoney: PropTypes.func.isRequired,\n    setAlert: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired,\n    // blackjack: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    auth: state.auth,\n    profile: state.profile.profile\n})\n\nexport default connect(mapStateToProps, {setAlert, getCurrentProfile, updateMoney})(Learn)","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/LearnCounting.js",["222","223","224"],"import React, {Fragment ,useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport {Link, Redirect} from 'react-router-dom';\nimport  { connect } from 'react-redux';\nimport { getCurrentProfile } from '../../actions/profile';\n\nconst LearnCounting = ({getCurrentProfile, auth, profile}) => {\n    useEffect(() => {\n        getCurrentProfile();\n    }, []);\n\n    return (\n        <Fragment>\n            <section className=\"landing\">\n                <div className=\"dark-overlay\">\n                    <div className='container'>\n                    <div className=\"signup-form\">\n                        <div>\n                        <h2 className='text-primary-dashboard'>Learn to Count</h2>\n                        </div>\n                    </div>\n                    </div>\n                </div>\n            </section>\n        </Fragment>\n    )\n}\n\nLearnCounting.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    // auth: PropTypes.object.isRequired,\n    // profile: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    // auth: state.auth,\n    // profile: state.profile\n})\n\nexport default connect(mapStateToProps, {getCurrentProfile})(LearnCounting)","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/blackjack.js",["225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257"],"const blackjack = function () {\n    return {\n            suits: '♠︎ ♥︎ ♣︎ ♦︎'.split(' '),\n            values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\", \"A\"],\n            push: 'Push',\n            win: \"Win\",\n            loss: \"Loss\",\n            blackjack: \"BlackJack\",\n            dealerblackjack: \"Dealer Blackjack\",\n            deck: [],\n            players: [],\n            currentGameOutcome: [],\n            createDeck: function () {\n                let deck = [];\n                for (let i = 0 ; i < this.values.length; i++) {\n                    for(let x = 0; x < this.suits.length; x++) {\n                        let weight = parseInt(this.values[i]);\n                        if (this.values[i] == \"J\" || this.values[i] == \"Q\" || this.values[i] == \"K\")\n                            weight = 10;\n                        if (this.values[i] == \"A\")\n                            weight = 11;\n                        const card = { value: this.values[i], suit: this.suits[x], weight: weight };\n                        deck.push(card);\n                    }\n                }\n                this.deck = deck;\n            },\n            shuffle: function () {\n                for (let i = 0; i < 1000; i++) {\n                    const location1 = Math.floor((Math.random() * this.deck.length));\n                    const location2 = Math.floor((Math.random() * this.deck.length));\n                    const tmp = this.deck[location1];\n                    this.deck[location1] = this.deck[location2];\n                    this.deck[location2] = tmp;\n                }\n            },\n            createPlayers: function (num=2) {\n                let new_players = [];\n                for (let i = 1; i <= num; i++) {\n                    const hand = new Array();\n                    const player = { name: 'Player ' + i, id: i, Points: 0, hand: hand, hands: [] };\n                    new_players.push(player);\n                }\n                this.players = new_players;\n            },\n            startblackjack: function (players = 2) {\n                // this.createDeck();\n                // this.shuffle();\n                this.createPlayers(players);\n                this.dealHands();\n                return { \n                    hasBlackJack: this.hasBlackJack(), \n                    playerHasDoubles: this.playerHasDoubles()\n                }\n            },\n            dealHands: function() {\n                for(let  i = 0; i < 2; i++) {\n                    for (let x = 0; x < this.players.length; x++) {\n                        //card will have the card selected, pop will update the deck\n                        var card = this.deck.pop();\n                        this.players[x].hand.push(card);\n                    }\n                }\n            },\n            hit: function (player=0) {\n                if (this.currentGameOutcome.length > 0 ) this.currentGameOutcome = [];\n                var card = this.deck.pop();\n                this.players[player].hand.push(card);\n                var score = this.getScore(player, null);\n                if (score == 21) {\n                    this.dealerPlay();\n                } else if (score > 21) {\n                    this.currentGameOutcome = [this.loss]\n                }\n                return this.currentGameOutcome;\n            },\n            hitSplitHand: function (player, handIndex) {\n                var card = this.deck.pop();\n                this.players[player].hands[handIndex].hand.push(card);\n                var score = this.getScore(player, handIndex);\n                if (score > 21 && this.currentGameOutcome.length == 0) {\n                    this.currentGameOutcome = [this.loss];\n                } else if (score > 21) {\n                    this.currentGameOutcome.push(this.loss)\n                }\n                return this.currentGameOutcome;\n            },\n            double: function (playerIndex, handIndex) {\n                const card = this.deck.pop(); \n                if (handIndex) {\n                    this.players[playerIndex].hands[handIndex].push(card); \n                    const score = this.getScore(playerIndex, handIndex);\n                    if (score > 21) {\n                        this.currentGameOutcome = [this.loss];\n                        return 'Loss';\n                    } else {\n                        this.dealerPlay();\n                    }\n                } else {\n                    this.players[playerIndex].hand.push(card); \n                    const score = this.getScore(playerIndex, null);\n                    if (score > 21) {\n                        this.currentGameOutcome = [this.loss];\n                        return 'Loss';\n                    } else {\n                        this.dealerPlay();\n                    }\n                }\n            },\n            hasBlackJack: function (player = 0) {\n                const playerHand = this.getScore(player);\n                const dealerHand = this.getScore(this.players.length -1);\n                 if (playerHand == 21 && dealerHand == 21 ) {\n                    this.currentGameOutcome = [this.push];\n                     return true;\n                 } else if (playerHand != 21 && dealerHand == 21 ) {\n                     this.currentGameOutcome = [this.dealerblackjack];\n                     return true;\n                 } else if (playerHand == 21 && dealerHand != 21) {\n                    this.currentGameOutcome = [this.blackjack];\n                     return true;\n                 } else {\n                     return false;\n                 }\n            },\n            playerHasDoubles: function (player=0, index=null) {\n                if (!index && index != 0) { //initial hand\n                    if (this.players[player].hand[0].weight == this.players[player].hand[1].weight) return true;\n                    else return false\n                } else { //split hand\n                    console.log('line 132', player, index)\n                    if (this.players[player].hands[index].hand[0].weight == this.players[player].hands[index].hand[1].weight) return true;\n                    else return false\n                }\n            },\n            dealerPlay: function () {\n                let that = this;\n                let dealer = this.players.slice(-1)[0];\n                let aces = 0;\n                console.log(this)\n                var dealerHandValue = dealer.hand.reduce(function(total, currentValue) { \n                    if (currentValue.weight == 11) aces++;\n                    let actualTotal = total && total.weight ? total.weight : total;\n                    let weight = currentValue && currentValue.weight ? currentValue.weight : currentValue;\n                    return actualTotal + weight;  \n                })\n                if (dealerHandValue > 21 && aces > 0) {\n                    while (dealerHandValue > 21 && aces > 0) {\n                        aces --;\n                        dealerHandValue = dealerHandValue - 10;\n                    }\n                }\n                if (dealerHandValue == 21 && dealer.hand.length == 2) {\n                    const player = this.players[0];\n                    let playerHandValue = this.getScore(0, null);\n                    if ( dealerHandValue == playerHandValue && player.hand.length == 2 ) {\n                        this.currentGameOutcome = [this.push];\n                        return 'Push';\n                    } else {\n                        this.currentGameOutcome = [this.loss];\n                        return \"Loss\";\n                    }\n                }\n                while (dealerHandValue < 17) {\n                    var card = this.deck.pop();\n                    dealerHandValue = dealerHandValue + card.weight\n                    if (card.weight = 11 && dealerHandValue > 21) {\n                        while (dealerHandValue > 21 && aces > 0) {\n                            aces --;\n                            dealerHandValue = dealerHandValue - 10;\n                        }\n                    }\n                    that.players[this.players.length - 1].hand.push(card);\n                }\n\n                if (dealerHandValue >= 17 && dealerHandValue < 22) {\n                    return this.compareHands(dealerHandValue);\n                }\n   \n                if (dealerHandValue > 21) {\n                    const playerHand = this.getScore(0);\n                    if (playerHand < 22 ) {\n                        this.currentGameOutcome = [this.win];\n                        return \"Win\";\n                    }\n                } else {\n                    return this.compareHands(dealerHandValue);\n                }\n            },\n            dealerPlaySplit: function (playerIndex = 0) {\n                let that = this;\n                let dealer = this.players.slice(-1)[0];\n                let aces = 0;\n                var dealerHandValue =dealer.hand.reduce(function(total, currentValue) { \n                    if (currentValue.weight == 11) aces++;\n                    let actualTotal = total && total.weight ? total.weight : total;\n                    let weight = currentValue && currentValue.weight ? currentValue.weight : currentValue;\n                    return actualTotal + weight;  \n                })\n                if (dealerHandValue > 21 && aces > 0) {\n                    while (dealerHandValue > 21 && aces > 0) {\n                        aces --;\n                        dealerHandValue = dealerHandValue - 10;\n                    }\n                }\n                while (dealerHandValue < 17) {\n                    var card = this.deck.pop();\n                    dealerHandValue = dealerHandValue + card.weight;\n                    if (card.weight = 11 && dealerHandValue > 21) {\n                        while (dealerHandValue > 21 && aces > 0) {\n                            aces --;\n                            dealerHandValue = dealerHandValue - 10;\n                        }\n                    }\n                    that.players[this.players.length - 1].hand.push(card);\n                }\n                if (dealerHandValue >= 17 && dealerHandValue < 32) {\n                    for (let i=0; i<this.players[playerIndex].hands.length ; i++ ) {\n                        const playerHandValue = this.getScore(0,i);\n                        if (dealerHandValue == playerHandValue ) {\n                            this.currentGameOutcome.push(that.push);\n                        } else if (dealerHandValue > playerHandValue) {\n                            this.currentGameOutcome.push(that.loss);\n                        } else {\n                            this.currentGameOutcome.push(that.win);\n                        }\n                    }\n                }\n            },\n            compareHands: function (dealerScore) {\n                const playerHandValue = this.getScore(0);\n                if (dealerScore == playerHandValue ) {\n                    this.currentGameOutcome = [this.push];\n                    return this.push;\n                } else if (dealerScore > playerHandValue) {\n                    this.currentGameOutcome = [this.loss];\n                    return this.loss;\n                } else {\n                    this.currentGameOutcome = [this.win];\n                    return this.win;\n                }\n            },\n            compareHandsWithSplit: function (dealerScore, playerIndex=0) {\n                const player = this.players[playerIndex];\n                let outcomes = \"\"\n                if (player.hands) {\n                    const playerHands = this.getScoreWithSplit(player.hands);\n                    outcomes = playerHands.map(playerHand => {\n                        if (dealerScore == playerHand  ) {\n                            this.currentGameOutcome = [this.push];\n                        } else if (dealerScore > playerHand ) {\n                            this.currentGameOutcome = [this.loss];\n                        } else {\n                            this.currentGameOutcome = [this.win];\n                        }\n                    })\n                }\n            },\n            getScore: function (playerIndex=0, handIndex=null) {\n                const player = this.players[playerIndex];\n                let playerHandValue = null;\n                if (handIndex !== null) {\n                    let aces = 0;\n                    playerHandValue = player.hands[handIndex].hand.reduce(function(total, currentValue){ \n                        if (currentValue.weight == 11) aces++;\n                        let actualTotal = total && total.weight ? total.weight : total;\n                        let weight = currentValue && currentValue.weight ? currentValue.weight : currentValue;\n                        return actualTotal + weight;  \n                    })\n                    if (playerHandValue > 21 && aces > 0) {\n                        while (playerHandValue > 21 && aces > 0) {\n                            aces --;\n                            playerHandValue = playerHandValue - 10;\n                        }\n                    }\n                } else {\n                    let aces = 0;\n                    playerHandValue = player.hand.reduce(function(total, currentValue){\n                        if (currentValue.weight  == 11) aces++;\n                        let actualTotal = total && total.weight ? total.weight : total;\n                        let weight = currentValue && currentValue.weight ? currentValue.weight : currentValue;\n                        return actualTotal + weight;  \n                    })\n                    if (playerHandValue > 21 && aces > 0) {\n                        while (playerHandValue > 21 && aces > 0) {\n                            aces --;\n                            playerHandValue = playerHandValue - 10;\n                        }\n                    }\n                }\n                return playerHandValue;\n            },\n            getScoreWithSplit: function (aHands) {\n                const hands = aHands;\n                let resultsArray = []\n                for (let index=0; index<hands.length ; index++) {\n                    resultsArray.push(this.getScore(0, index))\n                }\n                return resultsArray;\n            },\n            splitAce: function (playerIndex) {\n                let player = this.players[playerIndex];\n                let currentHand = player.hand; //array of cards\n                player.hands = [\n                    {\n                        isDone: false,\n                        hand: [currentHand[0]]\n                    },\n                    {\n                        isDone: false,\n                        hand: [currentHand[1]]\n                    }\n                ]\n                const firstCard = this.deck.pop();\n                this.players[playerIndex].hands[0].hand.push(firstCard);                 \n                const secondCard = this.deck.pop();\n                this.players[playerIndex].hands[1].hand.push(secondCard);\n                this.players[playerIndex].hand = [];\n                this.dealerPlaySplit();\n            },\n            split: function (playerIndex) {\n                let player = this.players[playerIndex];\n                let currentHand = player.hand; //array of cards\n                player.hands = [\n                    {\n                        isDone: false,\n                        hand: [currentHand[0]]\n                    },\n                    {\n                        isDone: false,\n                        hand: [currentHand[1]]\n                    }\n                ]\n                const firstCard = this.deck.pop();\n                this.players[playerIndex].hand = [];\n                this.players[playerIndex].hands[0].hand.push(firstCard); \n            },\n            splitSplit: function (playerIndex=0, handIndex) {\n                let player = this.players[playerIndex];\n                let currentHand = player.hands[handIndex];\n                player.hands.push({\n                    isDone: false,\n                    hand: [currentHand.hand[1]]\n                });\n                this.players[playerIndex].hands[handIndex].hand.pop();\n                const newCard = this.deck.pop();\n                this.players[playerIndex].hands[handIndex].hand.push(newCard);\n            },\n            getDealerFirstCard: function () {\n                return this.players[this.players.length -1].hand[0].weight;\n            },\n            playerHasAce: function (player = 0, isSplit = false) {\n                if (isSplit) {\n                    let handIndex = this.players[player].hands.findIndex(singleHand => !singleHand.isDone);\n                    return this.players[player].hands[handIndex].some(card => {\n                        return card.value == \"A\";\n                    })\n                } else {\n                    return this.players[0].hand.some(card => {\n                        return card.value == \"A\";\n                    })\n                };\n            }\n}    \n}\n\nexport default blackjack;\n\n\n\n\n","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/reducers/game.js",["258"],"import {SET_OUTCOME, REMOVE_OUTCOME } from \"../actions/types\";\nconst initialState = [];\n\nexport default function (state=initialState, action) {\n    const { type, payload } = action;\n    console.log(action)\n    switch(type) {\n        case SET_OUTCOME:\n            return [...state, payload];\n        case REMOVE_OUTCOME:\n            return state.filter(outcome => outcome.id !== payload);\n        default: \n            return state;\n\n    }\n\n}","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/layout/Outcome.js",["259"],"import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst Outcome = ({ outcomes }) => outcomes && outcomes !== null && outcomes.length > 0 && \n\n    outcomes.map(outcome => {\n        return (\n        <div key={outcome.id} className={`outcome outcome-${outcome.alertType}`}>\n            {outcome.msg}\n        </div>)\n    })\n\nOutcome.propTypes = {\n    // outcomes: PropTypes.array.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    outcomes: state.outcomes\n})\n\nexport default connect(mapStateToProps)(Outcome)","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/actions/game.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/Rules.js",["260","261","262"],"\nimport React, {Fragment ,useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport {Link, Redirect} from 'react-router-dom';\nimport  { connect } from 'react-redux';\nimport { getCurrentProfile } from '../../actions/profile';\nimport rules  from '../../game/rules';\nimport ListGroup from 'react-bootstrap/ListGroup';\n\nconst Counting = ({getCurrentProfile, auth, profile}) => {\n    useEffect(() => {\n        getCurrentProfile();\n    }, []);\n\n    const blackjackRules = rules();\n    console.log(blackjackRules)\n\n    const listRules = blackjackRules.map((blackjackRule, index) => {\n        return <ListGroup.Item>{index+1}. {blackjackRule}</ListGroup.Item>\n    })\n\n    return (\n        <Fragment>\n            <section className=\"landing\">\n                <div className=\"dark-overlay\">\n                    <div className='container'>\n                    <div className=\"signup-form\">\n                        \n                        <h2 className='text-primary-dashboard'>Rules</h2>\n                        <ListGroup className='rules'>\n                            {listRules}\n                        </ListGroup>\n\n                    </div>\n                    </div>\n                </div>\n            </section>\n        </Fragment>\n    )\n}\n\nCounting.propTypes = {\n    getCurrentProfile: PropTypes.func.isRequired,\n    // auth: PropTypes.object.isRequired,\n    // profile: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    // auth: state.auth,\n    // profile: state.profile\n})\n\nexport default connect(mapStateToProps, {getCurrentProfile})(Counting)","/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/rules.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/PlayerCards.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/DealerCards.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/components/game/display/PlayerSplitCards.js",[],"/Users/edwinrodriguez/Desktop/learnblackjack/client/src/game/basicStratagy.js",["263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281"],"// dealer is dealers first card\n// player is players hand value\n// isSoft, does the player hand include an ace\n// isOriginalHand player hand after initial deal (2 cards)\n// isPair if player has double\nconst getBasicStrategy = (dealerCard, playerTotal, isOriginalHand = true,  isSoft = false, isPair = false) => {\n   const stay = 'Stay';\n   const hit = 'Hit';\n   const double = 'Double';\n   const split = 'Split'\n   console.log(\"Dealer Cart: \", dealerCard, \"player total: \", playerTotal, \"isOriginalHand\", isOriginalHand,  \"isSoft\", isSoft,  \"isPair\", isPair)\n    if (!isSoft && !isPair) {\n        console.log('is hard and not a pair')\n        if (playerTotal <= 8) {\n            return hit\n        } else if (playerTotal == 9) {\n            if ([3,4,5,6].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 10 ) {\n            if ([2,3,4,5,6,7,8,9].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 11 ) {\n            if ([2,3,4,5,6,7,8,9,10].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 12 ) {\n            if ([4,5,6].includes(dealerCard) && isOriginalHand)\n                return stay;\n            else \n                return hit;\n        } else if (playerTotal > 12 && playerTotal < 17 ) {\n            if (dealerCard < 7)\n                return stay;\n            else \n                return hit;\n        } else {\n            return stay;\n        }\n    } else if (isSoft && !isPair) {\n        console.log('is soft and not a pair')\n        if (playerTotal == 13 || playerTotal == 14) {\n            if ([5,6].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 15 || playerTotal == 16) {\n            if ([4,5,6].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 17) {\n            if ([3,4,5,6].includes(dealerCard) && isOriginalHand)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 18) {\n            if ([3,4,5,6].includes(dealerCard) && isOriginalHand)\n                return double;\n            else if ([2,7,8].includes(dealerCard) && isOriginalHand)\n                return stay;\n            else \n                return hit;\n        } else {\n            return stay;\n        }\n    } else if (isPair && isOriginalHand) {\n        console.log('is a pair')\n        if (playerTotal == 4 || playerTotal == 6) {\n            if (dealerCard < 8)\n                return split;\n            else \n                return hit;\n        } else if (playerTotal == 8) {\n            if ([5,6].includes(dealerCard))\n                return split;\n            else \n                return hit;\n        } else if (playerTotal == 10) {\n            if (dealerCard < 10)\n                return double;\n            else \n                return hit;\n        } else if (playerTotal == 12) {\n            if (dealerCard < 7)\n                return split;\n            else \n                return hit;\n        } else if (playerTotal == 14) {\n            if (dealerCard < 8)\n                return split;\n            else \n                return hit;\n        } else if (playerTotal == 16 || playerTotal == 2) {\n            if (dealerCard < 8)\n                return split;\n        } else if (playerTotal == 18) {\n            if ([2,3,4,5,6, 8,9].includes(dealerCard))\n                return split;\n            else \n                return stay;\n        } else {\n            return stay;\n        }\n    } else {\n        return 'Error evaluating correct play';\n    }\n\n};\nexport default getBasicStrategy;",{"ruleId":"282","replacedBy":"283"},{"ruleId":"284","replacedBy":"285"},{"ruleId":"286","severity":1,"message":"287","line":7,"column":8,"nodeType":"288","messageId":"289","endLine":7,"endColumn":15},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":16,"endColumn":2},{"ruleId":"290","severity":1,"message":"291","line":10,"column":1,"nodeType":"292","endLine":45,"endColumn":2},{"ruleId":"286","severity":1,"message":"293","line":3,"column":15,"nodeType":"288","messageId":"289","endLine":3,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":10,"column":8,"nodeType":"296","endLine":10,"endColumn":10,"suggestions":"297"},{"ruleId":"290","severity":1,"message":"291","line":9,"column":1,"nodeType":"292","endLine":29,"endColumn":2},{"ruleId":"282","replacedBy":"298"},{"ruleId":"284","replacedBy":"299"},{"ruleId":"286","severity":1,"message":"300","line":2,"column":10,"nodeType":"288","messageId":"289","endLine":2,"endColumn":18},{"ruleId":"301","severity":1,"message":"302","line":35,"column":9,"nodeType":"303","messageId":"304","endLine":38,"endColumn":11},{"ruleId":"286","severity":1,"message":"305","line":3,"column":10,"nodeType":"288","messageId":"289","endLine":3,"endColumn":14},{"ruleId":"286","severity":1,"message":"306","line":8,"column":10,"nodeType":"288","messageId":"289","endLine":8,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":18,"column":8,"nodeType":"296","endLine":18,"endColumn":10,"suggestions":"307"},{"ruleId":"286","severity":1,"message":"308","line":40,"column":199,"nodeType":"288","messageId":"289","endLine":40,"endColumn":210},{"ruleId":"309","severity":1,"message":"310","line":73,"column":29,"nodeType":"311","messageId":"312","endLine":73,"endColumn":31},{"ruleId":"309","severity":1,"message":"310","line":75,"column":36,"nodeType":"311","messageId":"312","endLine":75,"endColumn":38},{"ruleId":"313","severity":1,"message":"314","line":107,"column":283,"nodeType":"315","messageId":"312","endLine":107,"endColumn":298},{"ruleId":"309","severity":1,"message":"310","line":111,"column":47,"nodeType":"311","messageId":"312","endLine":111,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":112,"column":52,"nodeType":"311","messageId":"312","endLine":112,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":119,"column":36,"nodeType":"311","messageId":"312","endLine":119,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":126,"column":31,"nodeType":"311","messageId":"312","endLine":126,"endColumn":33},{"ruleId":"309","severity":1,"message":"310","line":130,"column":51,"nodeType":"311","messageId":"312","endLine":130,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":131,"column":56,"nodeType":"311","messageId":"312","endLine":131,"endColumn":58},{"ruleId":"309","severity":1,"message":"310","line":141,"column":36,"nodeType":"311","messageId":"312","endLine":141,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":149,"column":30,"nodeType":"311","messageId":"312","endLine":149,"endColumn":32},{"ruleId":"309","severity":1,"message":"310","line":156,"column":40,"nodeType":"311","messageId":"312","endLine":156,"endColumn":42},{"ruleId":"309","severity":1,"message":"310","line":159,"column":30,"nodeType":"311","messageId":"312","endLine":159,"endColumn":32},{"ruleId":"309","severity":1,"message":"310","line":172,"column":36,"nodeType":"311","messageId":"312","endLine":172,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":177,"column":47,"nodeType":"311","messageId":"312","endLine":177,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":178,"column":52,"nodeType":"311","messageId":"312","endLine":178,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":185,"column":36,"nodeType":"311","messageId":"312","endLine":185,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":190,"column":26,"nodeType":"311","messageId":"312","endLine":190,"endColumn":28},{"ruleId":"309","severity":1,"message":"310","line":203,"column":36,"nodeType":"311","messageId":"312","endLine":203,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":208,"column":47,"nodeType":"311","messageId":"312","endLine":208,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":209,"column":52,"nodeType":"311","messageId":"312","endLine":209,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":217,"column":36,"nodeType":"311","messageId":"312","endLine":217,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":223,"column":26,"nodeType":"311","messageId":"312","endLine":223,"endColumn":28},{"ruleId":"309","severity":1,"message":"310","line":235,"column":36,"nodeType":"311","messageId":"312","endLine":235,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":244,"column":23,"nodeType":"311","messageId":"312","endLine":244,"endColumn":25},{"ruleId":"286","severity":1,"message":"305","line":3,"column":9,"nodeType":"288","messageId":"289","endLine":3,"endColumn":13},{"ruleId":"286","severity":1,"message":"293","line":3,"column":15,"nodeType":"288","messageId":"289","endLine":3,"endColumn":23},{"ruleId":"286","severity":1,"message":"306","line":9,"column":10,"nodeType":"288","messageId":"289","endLine":9,"endColumn":16},{"ruleId":"294","severity":1,"message":"295","line":19,"column":8,"nodeType":"296","endLine":19,"endColumn":10,"suggestions":"316"},{"ruleId":"286","severity":1,"message":"308","line":46,"column":240,"nodeType":"288","messageId":"289","endLine":46,"endColumn":251},{"ruleId":"286","severity":1,"message":"317","line":46,"column":268,"nodeType":"288","messageId":"289","endLine":46,"endColumn":276},{"ruleId":"309","severity":1,"message":"310","line":80,"column":29,"nodeType":"311","messageId":"312","endLine":80,"endColumn":31},{"ruleId":"309","severity":1,"message":"310","line":82,"column":36,"nodeType":"311","messageId":"312","endLine":82,"endColumn":38},{"ruleId":"313","severity":1,"message":"314","line":122,"column":283,"nodeType":"315","messageId":"312","endLine":122,"endColumn":298},{"ruleId":"309","severity":1,"message":"310","line":126,"column":47,"nodeType":"311","messageId":"312","endLine":126,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":127,"column":52,"nodeType":"311","messageId":"312","endLine":127,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":134,"column":36,"nodeType":"311","messageId":"312","endLine":134,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":141,"column":31,"nodeType":"311","messageId":"312","endLine":141,"endColumn":33},{"ruleId":"309","severity":1,"message":"310","line":145,"column":51,"nodeType":"311","messageId":"312","endLine":145,"endColumn":53},{"ruleId":"309","severity":1,"message":"310","line":146,"column":56,"nodeType":"311","messageId":"312","endLine":146,"endColumn":58},{"ruleId":"309","severity":1,"message":"310","line":157,"column":36,"nodeType":"311","messageId":"312","endLine":157,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":165,"column":30,"nodeType":"311","messageId":"312","endLine":165,"endColumn":32},{"ruleId":"309","severity":1,"message":"310","line":173,"column":40,"nodeType":"311","messageId":"312","endLine":173,"endColumn":42},{"ruleId":"309","severity":1,"message":"310","line":176,"column":30,"nodeType":"311","messageId":"312","endLine":176,"endColumn":32},{"ruleId":"309","severity":1,"message":"310","line":191,"column":36,"nodeType":"311","messageId":"312","endLine":191,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":196,"column":47,"nodeType":"311","messageId":"312","endLine":196,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":197,"column":52,"nodeType":"311","messageId":"312","endLine":197,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":204,"column":36,"nodeType":"311","messageId":"312","endLine":204,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":209,"column":26,"nodeType":"311","messageId":"312","endLine":209,"endColumn":28},{"ruleId":"309","severity":1,"message":"310","line":223,"column":36,"nodeType":"311","messageId":"312","endLine":223,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":228,"column":47,"nodeType":"311","messageId":"312","endLine":228,"endColumn":49},{"ruleId":"309","severity":1,"message":"310","line":229,"column":52,"nodeType":"311","messageId":"312","endLine":229,"endColumn":54},{"ruleId":"309","severity":1,"message":"310","line":238,"column":36,"nodeType":"311","messageId":"312","endLine":238,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":244,"column":26,"nodeType":"311","messageId":"312","endLine":244,"endColumn":28},{"ruleId":"309","severity":1,"message":"310","line":257,"column":36,"nodeType":"311","messageId":"312","endLine":257,"endColumn":38},{"ruleId":"309","severity":1,"message":"310","line":266,"column":23,"nodeType":"311","messageId":"312","endLine":266,"endColumn":25},{"ruleId":"286","severity":1,"message":"305","line":3,"column":9,"nodeType":"288","messageId":"289","endLine":3,"endColumn":13},{"ruleId":"286","severity":1,"message":"293","line":3,"column":15,"nodeType":"288","messageId":"289","endLine":3,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":10,"column":8,"nodeType":"296","endLine":10,"endColumn":10,"suggestions":"318"},{"ruleId":"309","severity":1,"message":"310","line":18,"column":44,"nodeType":"311","messageId":"312","endLine":18,"endColumn":46},{"ruleId":"309","severity":1,"message":"310","line":18,"column":69,"nodeType":"311","messageId":"312","endLine":18,"endColumn":71},{"ruleId":"309","severity":1,"message":"310","line":18,"column":94,"nodeType":"311","messageId":"312","endLine":18,"endColumn":96},{"ruleId":"309","severity":1,"message":"310","line":20,"column":44,"nodeType":"311","messageId":"312","endLine":20,"endColumn":46},{"ruleId":"319","severity":1,"message":"320","line":40,"column":34,"nodeType":"321","messageId":"322","endLine":40,"endColumn":45},{"ruleId":"309","severity":1,"message":"310","line":70,"column":27,"nodeType":"311","messageId":"312","endLine":70,"endColumn":29},{"ruleId":"309","severity":1,"message":"310","line":81,"column":66,"nodeType":"311","messageId":"312","endLine":81,"endColumn":68},{"ruleId":"309","severity":1,"message":"310","line":113,"column":33,"nodeType":"311","messageId":"312","endLine":113,"endColumn":35},{"ruleId":"309","severity":1,"message":"310","line":113,"column":53,"nodeType":"311","messageId":"312","endLine":113,"endColumn":55},{"ruleId":"309","severity":1,"message":"323","line":116,"column":40,"nodeType":"311","messageId":"312","endLine":116,"endColumn":42},{"ruleId":"309","severity":1,"message":"310","line":116,"column":60,"nodeType":"311","messageId":"312","endLine":116,"endColumn":62},{"ruleId":"309","severity":1,"message":"310","line":119,"column":40,"nodeType":"311","messageId":"312","endLine":119,"endColumn":42},{"ruleId":"309","severity":1,"message":"323","line":119,"column":60,"nodeType":"311","messageId":"312","endLine":119,"endColumn":62},{"ruleId":"309","severity":1,"message":"323","line":127,"column":37,"nodeType":"311","messageId":"312","endLine":127,"endColumn":39},{"ruleId":"309","severity":1,"message":"310","line":128,"column":61,"nodeType":"311","messageId":"312","endLine":128,"endColumn":63},{"ruleId":"309","severity":1,"message":"310","line":132,"column":74,"nodeType":"311","messageId":"312","endLine":132,"endColumn":76},{"ruleId":"309","severity":1,"message":"310","line":142,"column":45,"nodeType":"311","messageId":"312","endLine":142,"endColumn":47},{"ruleId":"309","severity":1,"message":"310","line":153,"column":37,"nodeType":"311","messageId":"312","endLine":153,"endColumn":39},{"ruleId":"309","severity":1,"message":"310","line":153,"column":65,"nodeType":"311","messageId":"312","endLine":153,"endColumn":67},{"ruleId":"309","severity":1,"message":"310","line":156,"column":42,"nodeType":"311","messageId":"312","endLine":156,"endColumn":44},{"ruleId":"309","severity":1,"message":"310","line":156,"column":83,"nodeType":"311","messageId":"312","endLine":156,"endColumn":85},{"ruleId":"324","severity":1,"message":"325","line":167,"column":25,"nodeType":"326","messageId":"327","endLine":167,"endColumn":65},{"ruleId":"309","severity":1,"message":"310","line":195,"column":45,"nodeType":"311","messageId":"312","endLine":195,"endColumn":47},{"ruleId":"324","severity":1,"message":"325","line":209,"column":25,"nodeType":"326","messageId":"327","endLine":209,"endColumn":65},{"ruleId":"309","severity":1,"message":"310","line":220,"column":45,"nodeType":"311","messageId":"312","endLine":220,"endColumn":47},{"ruleId":"309","severity":1,"message":"310","line":232,"column":33,"nodeType":"311","messageId":"312","endLine":232,"endColumn":35},{"ruleId":"286","severity":1,"message":"328","line":248,"column":21,"nodeType":"288","messageId":"289","endLine":248,"endColumn":29},{"ruleId":"329","severity":1,"message":"330","line":248,"column":59,"nodeType":"331","messageId":"332","endLine":248,"endColumn":61},{"ruleId":"309","severity":1,"message":"310","line":249,"column":41,"nodeType":"311","messageId":"312","endLine":249,"endColumn":43},{"ruleId":"309","severity":1,"message":"310","line":265,"column":49,"nodeType":"311","messageId":"312","endLine":265,"endColumn":51},{"ruleId":"309","severity":1,"message":"310","line":279,"column":50,"nodeType":"311","messageId":"312","endLine":279,"endColumn":52},{"ruleId":"309","severity":1,"message":"310","line":356,"column":43,"nodeType":"311","messageId":"312","endLine":356,"endColumn":45},{"ruleId":"309","severity":1,"message":"310","line":360,"column":43,"nodeType":"311","messageId":"312","endLine":360,"endColumn":45},{"ruleId":"290","severity":1,"message":"291","line":4,"column":1,"nodeType":"292","endLine":17,"endColumn":2},{"ruleId":"286","severity":1,"message":"333","line":2,"column":8,"nodeType":"288","messageId":"289","endLine":2,"endColumn":17},{"ruleId":"286","severity":1,"message":"305","line":4,"column":9,"nodeType":"288","messageId":"289","endLine":4,"endColumn":13},{"ruleId":"286","severity":1,"message":"293","line":4,"column":15,"nodeType":"288","messageId":"289","endLine":4,"endColumn":23},{"ruleId":"294","severity":1,"message":"295","line":13,"column":8,"nodeType":"296","endLine":13,"endColumn":10,"suggestions":"334"},{"ruleId":"309","severity":1,"message":"310","line":16,"column":32,"nodeType":"311","messageId":"312","endLine":16,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":21,"column":32,"nodeType":"311","messageId":"312","endLine":21,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":26,"column":32,"nodeType":"311","messageId":"312","endLine":26,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":31,"column":32,"nodeType":"311","messageId":"312","endLine":31,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":46,"column":25,"nodeType":"311","messageId":"312","endLine":46,"endColumn":27},{"ruleId":"309","severity":1,"message":"310","line":46,"column":46,"nodeType":"311","messageId":"312","endLine":46,"endColumn":48},{"ruleId":"309","severity":1,"message":"310","line":51,"column":32,"nodeType":"311","messageId":"312","endLine":51,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":51,"column":53,"nodeType":"311","messageId":"312","endLine":51,"endColumn":55},{"ruleId":"309","severity":1,"message":"310","line":56,"column":32,"nodeType":"311","messageId":"312","endLine":56,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":61,"column":32,"nodeType":"311","messageId":"312","endLine":61,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":73,"column":25,"nodeType":"311","messageId":"312","endLine":73,"endColumn":27},{"ruleId":"309","severity":1,"message":"310","line":73,"column":45,"nodeType":"311","messageId":"312","endLine":73,"endColumn":47},{"ruleId":"309","severity":1,"message":"310","line":78,"column":32,"nodeType":"311","messageId":"312","endLine":78,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":83,"column":32,"nodeType":"311","messageId":"312","endLine":83,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":88,"column":32,"nodeType":"311","messageId":"312","endLine":88,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":93,"column":32,"nodeType":"311","messageId":"312","endLine":93,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":98,"column":32,"nodeType":"311","messageId":"312","endLine":98,"endColumn":34},{"ruleId":"309","severity":1,"message":"310","line":98,"column":53,"nodeType":"311","messageId":"312","endLine":98,"endColumn":55},{"ruleId":"309","severity":1,"message":"310","line":101,"column":32,"nodeType":"311","messageId":"312","endLine":101,"endColumn":34},"no-native-reassign",["335"],"no-negated-in-lhs",["336"],"no-unused-vars","'Outcome' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'Redirect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentProfile'. Either include it or remove the dependency array. If 'getCurrentProfile' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["337"],["335"],["336"],"'setAlert' is defined but never used.","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","'Link' is defined but never used.","'Double' is defined but never used.",["338"],"'shuffleDeck' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-dupe-keys","Duplicate key 'showDealerCards'.","ObjectExpression",["339"],"'strategy' is assigned a value but never used.",["340"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","Expected '!==' and instead saw '!='.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'outcomes' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'PropTypes' is defined but never used.",["341"],"no-global-assign","no-unsafe-negation",{"desc":"342","fix":"343"},{"desc":"342","fix":"344"},{"desc":"342","fix":"345"},{"desc":"342","fix":"346"},{"desc":"342","fix":"347"},"Update the dependencies array to be: [getCurrentProfile]",{"range":"348","text":"349"},{"range":"350","text":"349"},{"range":"351","text":"349"},{"range":"352","text":"349"},{"range":"353","text":"349"},[352,354],"[getCurrentProfile]",[782,784],[846,848],[356,358],[442,444]]